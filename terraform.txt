terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = "us-east-1" 
}

# Variables for peering configuration
variable "peer_owner_id" {
  description = "AWS account ID of the peer VPC owner"
  type        = string
  default     = "" # Set your AWS account ID or use data source
}

# Create main VPC
resource "aws_vpc" "main" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "MyVPC"
  }
}

# Create peer VPCs
resource "aws_vpc" "foo" {
  cidr_block           = "10.1.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "FooVPC"
  }
}

resource "aws_vpc" "bar" {
  cidr_block           = "10.2.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "BarVPC"
  }
}

# VPC Peering between main and foo
resource "aws_vpc_peering_connection" "main_to_foo" {
  peer_owner_id = var.peer_owner_id
  peer_vpc_id   = aws_vpc.foo.id
  vpc_id        = aws_vpc.main.id
  auto_accept   = true

  tags = {
    Name = "Peering-Main-to-Foo"
  }
}

# VPC Peering between main and bar
resource "aws_vpc_peering_connection" "main_to_bar" {
  peer_owner_id = var.peer_owner_id
  peer_vpc_id   = aws_vpc.bar.id
  vpc_id        = aws_vpc.main.id
  auto_accept   = true

  tags = {
    Name = "Peering-Main-to-Bar"
  }
}

# Create public subnets in main VPC
resource "aws_subnet" "public" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "us-east-1a" # Change AZ if needed
  map_public_ip_on_launch = true

  tags = {
    Name = "PublicSubnet-A"
  }
}

resource "aws_subnet" "public2" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "us-east-1b" # Changed to different AZ for high availability
  map_public_ip_on_launch = true

  tags = {
    Name = "PublicSubnet-B"
  }
}

# Create Internet Gateway for main VPC
resource "aws_internet_gateway" "main_gw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "MainIGW"
  }
}

# Create route table for main VPC
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main_gw.id
  }

  # Routes to peered VPCs
  route {
    cidr_block                = "10.1.0.0/16"
    vpc_peering_connection_id = aws_vpc_peering_connection.main_to_foo.id
  }

  route {
    cidr_block                = "10.2.0.0/16"
    vpc_peering_connection_id = aws_vpc_peering_connection.main_to_bar.id
  }

  tags = {
    Name = "PublicRouteTable"
  }
}

# Associate route table with public subnets
resource "aws_route_table_association" "public1" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.public.id
}

resource "aws_route_table_association" "public2" {
  subnet_id      = aws_subnet.public2.id
  route_table_id = aws_route_table.public.id
}

# Create route tables for peered VPCs and add routes back to main VPC
resource "aws_route_table" "foo_peering" {
  vpc_id = aws_vpc.foo.id

  route {
    cidr_block                = "10.0.0.0/16"
    vpc_peering_connection_id = aws_vpc_peering_connection.main_to_foo.id
  }

  tags = {
    Name = "FooPeeringRouteTable"
  }
}

resource "aws_route_table" "bar_peering" {
  vpc_id = aws_vpc.bar.id

  route {
    cidr_block                = "10.0.0.0/16"
    vpc_peering_connection_id = aws_vpc_peering_connection.main_to_bar.id
  }

  tags = {
    Name = "BarPeeringRouteTable"
  }
}

# Optional: Create subnets in peered VPCs for completeness
resource "aws_subnet" "foo_subnet" {
  vpc_id            = aws_vpc.foo.id
  cidr_block        = "10.1.1.0/24"
  availability_zone = "us-east-1a"

  tags = {
    Name = "FooSubnet"
  }
}

resource "aws_subnet" "bar_subnet" {
  vpc_id            = aws_vpc.bar.id
  cidr_block        = "10.2.1.0/24"
  availability_zone = "us-east-1a"

  tags = {
    Name = "BarSubnet"
  }
}
